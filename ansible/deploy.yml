- name: provision aws resources
  hosts: localhost
  remote_user: ubuntu

  tasks:
    - name: fetch db credentials
      s3: bucket={{credential_bucket}} object={{credential_object}} dest={{credential_object}} mode=get

    - name: read db password
      shell: cat {{credential_object}}
      register: result

    - set_fact: db_pass="{{(result.stdout|from_json).password}}"

    - name: create VPC
      ec2_vpc:
        state: present
        cidr_block: 10.10.0.0/16
        resource_tags: { "Type": "crash-rate-aggregates-service", "App": "pipeline" }
        region: "{{region}}"
        internet_gateway: yes
        subnets:
          - cidr: 10.10.0.0/24
          - cidr: 10.10.1.0/24
            az: us-west-2a
          - cidr: 10.10.2.0/24
            az: us-west-2b
        route_tables:
          - subnets:
             - 10.10.0.0/24
            routes:
              - dest: 0.0.0.0/0
                gw: igw
          - subnets:
             - 10.10.1.0/24
            routes:
              - dest: 0.0.0.0/0
                gw: igw
          - subnets:
             - 10.10.2.0/24
            routes:
              - dest: 0.0.0.0/0
                gw: igw
        wait: yes
      register: vpc

    - name: create security group for service
      ec2_group:
        name: crash-rate-aggregates-service
        description: crash rate aggregates service
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 5000
            to_port: 5000
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        vpc_id: "{{vpc.vpc_id}}"

    - name: get a recent ubuntu AMI
      ec2_ami_search: distro=ubuntu release=wily store=instance-store region={{region}}
      register: ubuntu_image

    - name: create service instance
      ec2:
        image: "{{ubuntu_image.ami}}"
        region: "{{region}}"
        instance_type: m3.medium
        key_name: mozilla_vitillo
        assign_public_ip: yes
        group: crash-rate-aggregates-service
        instance_tags: { App: pipeline, Name: crash-rate-aggregates-service, Type: crash-rate-aggregates-service, Owner: rvitillo@mozilla.com }
        exact_count: 1
        count_tag: { Name: crash-rate-aggregates-service }
        vpc_subnet_id: "{{vpc.subnets[0].id}}"
        instance_profile_name: "telemetry-spark-cloudformation-TelemetrySparkInstanceProfile-1SATUBVEXG7E3"
        wait: yes
      register: ec2

    - name: wait for ssh server to be running
      wait_for: host={{ item.public_dns_name }} port=22 search_regex=OpenSSH
      with_items: ec2.instances

    - name: add new instance to the service group
      add_host: hostname={{ item.public_dns_name }} groups=service
      with_items: ec2.tagged_instances

    - name: create or change the db subnet group
      rds_subnet_group:
        region: "{{region}}"
        state: present
        name: crash-rate-aggregates
        description: crash rate aggregates
        subnets:
            - "{{vpc.subnets[1].id}}"
            - "{{vpc.subnets[2].id}}"
      register: subnet_group

    - name: create or change the security group for the db
      ec2_group:
        name: crash-rate-aggregates-db
        description: crash rate aggregates db
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 5432
            to_port: 5432
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        vpc_id: "{{vpc.vpc_id}}"
      register: db_group

    - name: create db
      rds:
        region: "{{region}}"
        command: create
        instance_name: crash-rate-aggregates
        instance_type: db.m3.xlarge
        db_engine: postgres
        db_name: crash-rate-aggregates
        backup_retention: 3
        publicly_accessible: yes
        size: 250
        username: root
        password: "{{db_pass}}"
        wait: yes
        subnet: crash-rate-aggregates
        vpc_security_groups: "{{db_group.group_id}}"
        tags: { App: pipeline, Type: crash-rate-aggregates-db, Owner: rvitillo@mozilla.com }

- include: service.yml
